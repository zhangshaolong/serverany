#!/usr/bin/env node

const fs = require('fs');
const http = require('http');
const https = require('https');
const path = require('path');
const express = require('express');
const serveIndex = require('serve-index');
const mockProxyMiddleware = require('mock-proxy-middleware');

// serverany --index index.html --base ${pwd} --config config.js --port 8800

const defaultArgs = {
  index: 'index.html',
  base: process.cwd(),
  config: 'config.js',
  port: 8800,
};

const parseArgs = () => {
  const argv = process.argv.slice(2);
  const args = {};
  for (let i = 0; i < argv.length; i++) {
    argv[i].replace(/^--(.*)$/, (all, key) => {
      args[key] = argv[++i];
    });
  }
  return Object.assign({}, defaultArgs, args);
};

const getAbsolutePath = (filePath, base) => {
  if (filePath.startsWith('/')) {
    return filePath;
  }
  return path.resolve(base, filePath);
};

const args = parseArgs();

const app = express();

const configPath = getAbsolutePath(args.config, args.base);

try {
  fs.accessSync(configPath, fs.constants.R_OK);
  app.use(mockProxyMiddleware(configPath));
} catch (e) {}

app.use(express.static(getAbsolutePath(args.base)));

app.use(serveIndex(getAbsolutePath(args.base), {icons: true}));

app.use('/', (req, res) => {
  res.sendFile(getAbsolutePath(args.index, args.base));
});

const options = {
  key: fs.readFileSync(path.resolve(__dirname, './key')),
  cert: fs.readFileSync(path.resolve(__dirname, './cert')),
};

http.createServer(app).listen(Number(args.port));
https.createServer(options, app).listen(Number(args.port) + 1);
console.log(`http://localhost:${args.port}/`);
console.log(`https://localhost:${Number(args.port) + 1}`);
