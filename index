#!/usr/bin/env node

const fs = require('fs');
const http = require('http');
const https = require('https');
const path = require('path');
const express = require('express');
const serveIndex = require('serve-index');
const mockProxyMiddleware = require('mock-proxy-middleware');

// serverany --index index.html --base ${cwd} --config config.js --port 8800

const defaultArgs = {
  index: 'index.html',
  base: process.cwd(),
  config: 'config.js',
  port: 8800,
};

const parseArgs = () => {
  const argv = process.argv.slice(2);
  const args = {};
  for (let i = 0; i < argv.length; i++) {
    argv[i].replace(/^--(.*)$/, (all, key) => {
      args[key] = argv[++i];
    });
  }
  const mergedArgs = Object.assign({}, defaultArgs, args);
  mergedArgs.base = path.resolve(mergedArgs.base);
  return mergedArgs;
};

const getAbsolutePath = (filePath, base) => {
  if (filePath.startsWith('/')) {
    return filePath;
  }
  return path.resolve(base, filePath);
};

const canRead = (filePath) => {
  try {
    fs.accessSync(filePath, fs.constants.R_OK);
    return true;
  } catch (e) {}
  return false;
};

const args = parseArgs();

const app = express();

const configPath = getAbsolutePath(args.config, args.base);

if (canRead(configPath)) {
  app.use(mockProxyMiddleware(configPath));
}

app.use(express.static(args.base));

app.use(serveIndex(args.base, {icons: true}));

const indexPath = getAbsolutePath(args.index, args.base);

if (canRead(indexPath)) {
  app.use('/', (req, res) => {
    res.sendFile(indexPath);
  });
}

const options = {
  key: fs.readFileSync(path.resolve(__dirname, './key')),
  cert: fs.readFileSync(path.resolve(__dirname, './cert')),
};

http.createServer(app).listen(Number(args.port));
https.createServer(options, app).listen(Number(args.port) + 1);

console.log(`\n>>> http://localhost:${args.port}\n\n>>> https://localhost:${Number(args.port) + 1}`);