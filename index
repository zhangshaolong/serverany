#!/usr/bin/env node

const http = require("http");
const https = require("https");
const fs = require("fs");
const URL = require("url");
const express = require("express");
const path = require("path");
const mockProxyMiddleware = require("mock-proxy-middleware");

// serverany --index index.html --base ${pwd} --config config.json --port 8800

const defaultArgs = {
  index: "index.html",
  base: process.cwd(),
  config: "config.js",
  port: 8800,
};

const parseArgs = () => {
  const argv = process.argv.slice(2);
  const args = {};
  for (let i = 0; i < argv.length; i++) {
    argv[i].replace(/^\-\-(.*)$/, (all, key) => {
      args[key] = argv[++i];
    });
  }
  return Object.assign({}, defaultArgs, args);
};

const args = parseArgs();

const app = express();

app.use(express.static(args.base));

const configPath = path.resolve(args.base, args.config);

try {
  fs.accessSync(configPath, fs.constants.R_OK);
  app.use(mockProxyMiddleware(configPath));
} catch (e) {}

app.use("/", (req, res) => {
  res.sendFile(path.resolve(args.base, args.index));
});

const options = {
  key: fs.readFileSync(path.resolve(__dirname, "./key")),
  cert: fs.readFileSync(path.resolve(__dirname, "./cert")),
};

http.createServer(app).listen(Number(args.port));
https.createServer(options, app).listen(Number(args.port) + 1);
console.log(`http://localhost:${args.port}/`);
console.log(`https://localhost:${Number(args.port) + 1}`);
